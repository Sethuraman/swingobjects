#Swing Objects defaults

#When a error occurs, how would you like the user to report the error? The base
#implementation is in the below class. Have a look at it and implement something similar.
#The InfoGatherErrorReporterFrame, has a textbox where the users enters a few steps and
#the framework sends an email to the below ID. All you have to do to use this, is to modify
#the email ID and password. To replace  InfoGatherErrorReporterFrame, just write your code
#that implements the swingx ErrorReporter interface and plug it in here.
errorreporter=org.aesthete.swingobjects.view.InfoGatherErrorReporterFrame
sendemailto=writetosethu@gmail.com
emailpassword=Krithika1
emailsmtp=smtp.gmail.com
#Structure of the Body of the email that will be sent
#{0} - will be the info typed by the user
#{1} - will be the stack trace of the exception
swingobj.infogather.emailbody=<html><body><b>User Description of the error:</b><br/>{0}<br/><br/><b>Detailed Error Message:</b><br/>{1}</body></html>
swingobj.errorreport.sent=Error report sent successfully. We are grateful for your time.\nThis error will be fixed as soon as possible.


#specify the time format to use when using the TimePicker component
timepicker.timeformat=hh:mm a

#time after which to show the wait dialog. Meaning if the model takes more than x milliseconds to
#come back, then we show a wait dialog. Otherwise, the wait dialog will just open and close immediately
#the value is in milliseconds
waitdialogopentime=100


#JXErrorPane - Information Gatherer
errorreport.gatherinfo.title=Provide more information about the Error


#icon for your application. If you would like an icon to appear in all frames, dialogs, etc
#then provide the location here. The location should be provided as a classpath resource.
#specifically it will be used like this: Class.getResource("<resource>").getImage()
#Leave commented if there are none.
#application-icon=/someresource/icon.png



#date picker
program.title=Calendar

month.0=Jan
month.1=Feb
month.2=Mar
month.3=Apr
month.4=May
month.5=Jun
month.6=Jul
month.7=Aug
month.8=Sep
month.9=Oct
month.10=Nov
month.11=Dec

week.0=Su
week.1=Mo
week.2=Tu
week.3=We
week.4=Th
week.5=Fr
week.6=Sa

pre.mon=Previous month
next.mon=Next month
pre.year=Previous year
next.year=Next year


# GUI Elements defaults:

#trim - removes spaces to the right and left a JTextComponent automatically -
# you can override this at an individual level by using the annotation @Trim(YesNo.Yes) or @Trim(YesNo.No)
# to reset it here you need to make it false
guielements.texttrim=true



# JGoodies FormLayout - Set a few defaults for this layout.
# The layout defaults used here are applied in the class FormLayoutConfig
# Labels are defaulted to the below and can be accessed globally as $lbl
layout.label=fill\:pref
# Textfields are defaulted to the below and can be accessed globally as $tf
layout.textfield=fill\:150dlu
# Column gap - generally the space between components like between a label and a textfield
# for example can be accessed $columngap
layout.columngap=5dlu
# Row gap - the space between 2 rows and can be accessed as $rowgap
layout.rowgap=5dlu
# Row separator gap - the gap between a row and a separator below that and can be accessed
# as $rowsegap
layout.rowsepgap=11dlu
# Row button gap - the gap between a row of components and a button bar below it and can be
# accessed as $rowbtngap
layout.rowbtngap=10dlu
#A normal row and can be accessed as $row
layout.row=center\:pref



#Common Error Properties




# Used in org.aesthete.swingobjects.view.WaitDialog.initComponents()

# This is the initial text that appears in the wait dialog text area
waitdialog.title=Your action is being processed... Please wait..
# This is the image that appears on the top of the wait dialog above the text area
waitdialog.waitimage=/images/wait.gif